Lists using array
When an element is added to an empty list in Python, a block of memory is allocated and element is added at index position 0. The remaining memory is considered to be reserved space which will be used later for addition or insertion of elements.

List using array (addition of elements)
add(element):
1. When the list is initially created, it is created with a certain capacity.
2. While adding the elements, if the list is filled to the capacity,
   a. Create a new list with increased capacity
   b. Copy the elements of initial list to the new list
3. Add the element to the end of the existing elements in the list
                  
marias_tuple = ("Tea Bags","Milk")
marias_lst.extend(marias_tuple)
In this way, we can add or extend elements to a list.

List using array(insertion of elements at a particular position)
insert(pos, element):
 1. If the list is filled to capacity
    a. Create a new list with increased capacity
    b. Copy the elements of initial list to the new list
 2. Shift right all the existing elements from index position (pos) by 1 position
 3. Insert the element at index position (pos)
                
List using array(Deletion of elements at a particular position)
delete(pos):
 1. Shift left all the existing elements from index 
    position (pos+1) by 1 position
Note: Capacity will be decreased whenever remaining number 
of elements fall below certain value
marias_lst.pop(1) -> This deletes the element at the first position

When we lookup for employees by keying his/her name in a dictionary of an organization,it retrieves the object of all the employee details who have the keyed name in it and stores it in a list before displaying it.

Disadvantage
When capacity of the array is increased during addition or insertion of elements, it may result in wastage of memory in the form of reserved space.
As Maria's list is going to have frequent additions and deletions, it may not be a good choice to implement it using arrays. 
There is one more implementation for list which is using Linked List. Let's explore list using linked list.



Lists using Linked list

A linked list consists of a group of nodes which together represent a sequence or a list. Each node will have a data part which holds the actual data and an address part which holds the link to the next node. The first node in the list is known as head node and the last node is known as tail node. Unlike array, in linked list, the nodes need not be stored in contiguous memory locations

Creation of Linked List
class LinkedList:
    def __init__(self):
        self.__head=None
        self.__tail=None
    def get_head(self):
        return self.__head
    def get_tail(self):
        return self.__tail

Displaying the elements of a linked list by traversing through the elements
Assume that Maria's list is maintained as a linked list and she wants to traverse through the list and display the items in the list starting from the first item.
Algorithm steps:
display()
1. Call the head node as temp
2. While temp is not None,
   a. Display temp’s data
   b. Make the next node as temp

Adding elements to linked list
add(data)
1. Create a new node with the data
2. If the linked list is empty (head node is not referring to any other node), 
   make the head node and the tail node refer to the new node
3. Otherwise,
   a. Make the tail node’s link refer to new node
   b. Call the new node as tail node

Use zip function when there is a need to merge two lists or iterate through two lists simultaneously

Inserting Elements in a Linked List at specific Positions
insert(data,data_before)
1. Create a new node with the given data
2. If the data_before is None,
    a. Make the new node's link refer to head node 
    b. Call the new node as head node
    c. If the new node's link is None, make it the tail node
3. Else
    a. Find the node with data_before, once found consider it as node_before
    b. Make the new node’s link refer to node_before’s link.
    c. Make the node_before’s link refer to new node
    d. If new node’s link is None, make it the tail node
4. If node with data_before is not found, display appropriate error message

Deleting Elements from linked list algorithm
delete(data):
1. Find the node with the given data. If found,
   a. If the node to be deleted is head node, make the next node as head node
      1. If it is also the tail node, make the tail node as None
   b. Otherwise,
      1. Traverse till the node before the node to be deleted, call it temp
      2. Make temp’s link refer to node’s link.
      3. If the node to be deleted is the tail node, call the temp as tail node
      4. Make the node's link as None
2. If the node to be deleted is not found, display appropriate error message

Difference between list using Array and List using Linked list

                              List using Array	                                                                             List using Linked List
 Insert	 Shifting of elements are required	                                        Shifting of elements are not required
 Delete	 Shifting of elements are required	                                        Shifting of elements are not required
 Memory	 Elements are stored in contiguous memory locations	     Elements need not necessarily be stored in contiguous memory locations
 Access	 Both random and sequential	                                        Only sequential


Stack
 	This pile of shirts arranged one on top of the other which follows Last-In-First-Out (LIFO) principle is known as Stack.
 	
     Operations possible on the stack are:

 Push or insert an element to the top of the stack
 Pop or remove an element from top of the stack

"Elements of a Stack are stored in a python list"

Stack -> push algorithm

push(data):
1. Check whether the stack is full. If full, display appropriate message
2. If not,
   a. increment top by one
   b. Add the element at top position in the elements array


pop:
1. Check whether the stack is empty. If empty, display appropriate message
2. If not,
   a. Retrieve data at the top of the stack
   b. Decrement top by 1
   c. Return the retrieved data

Queue
Operations possible on the queue are:

En-queue or add an element to the end of the queue

De-queue or remove an element from the front of the queue

enqueue (data):
1. Check whether queue is full. If full, display appropriate message
2. If not,
   a. increment rear by one
   b. Add the element at rear position in the elements array
dequeue()
1. Check whether the queue is empty. If it is empty, display appropriate message
2. If not,
   a. Retrieve data at the front of the queue
   b. Increment front by 1
   c. Return the retrieved data

NEtworking -> Non Linear Data Structures
In these scenarios, we understand that we cannot use any of the linear data structures like array, linked list, stack or queue to represent it. Here, we need an arrangement which allows to have a set of vertices and edges between them. Such a data structure is known as graph. 

Graph is a non-linear data structure having a set of vertices(or nodes) and edges between vertices. It can have any number of edges and nodes and any node can be connected to any other node by an edge. It can be implemented using arrays or linked lists.

Tree !

Scenario-1:

Maria is preparing her family tree. She has her grandfather as the head of the family. Her grandfather has three sons and one daughter. Her aunt and uncles have one son and one daughter each. Maria is the only child of her father.

Scenario-2: 

Peter who has become the head of his team is preparing the organization structure. He has two senior managers reporting into him. To each of the senior managers, there are two managers reporting and to each of the managers, there are again two software engineers reporting.

This type of non-linear arrangement where a node is attached to one or more nodes directly beneath it, is a special type of graph known as tree. In this data structure, the top most node is called the root and the connections between nodes are called edges. Nodes that have no children are called leaf nodes and non-root and non-leaf nodes are called internal nodes.
Trees are used extensively in searching and sorting applications.


In Most OS, folders, their sub folders and file indexes are organized in a tree Data Structure. Each node is a Directory/sub-directory and each leaf is a file

PART 2
Hashing and Hash Table

suppose a bank wants to store the details of 1 million customers with the customer name as the primary key. the customer name followed by the corresponding account number is set to be the 
primary key for each customer. now to search for a particular customer, 
The search will involve character by character searching of each customer name followed by the 11 digit account number. i.e. 26 possibilities for each character of a variable length string followed by 10 possibilities for each of the 11 digits.
In these kind of situations, hashing can be used to arrive at a fixed length shorter hash value from the key. Searching a fixed length shorter hash value is definitely much faster than searching for the original key value.
Hashing is the process of transforming a set of characters (key) into a shorter fixed length integer value. This shorter fixed length integer value which represents the original set of characters (key) is known as hash value or hash. A hash function will be used to generate the hash value from the original set of characters (key). Various algorithms may be used to arrive at the hash function.

Suppose we have a key-value pair as shown below. Here key is the three letter abbreviation of country names and value is the corresponding country name.  

Input(Key)

Value

ISR	Israel
PER	Peru
IND	India
FJI	Fiji
CAN	Canada

Hash values corresponding to each key can be generated as shown below:

Key(Input)	Value	Hash(Output)
ISR	Israel	
(ord("I")+ord("S")+ ord("R"))%5

 (73+83+82)%5	238%5	3
PER	Peru	
(ord("P")+ ord("E") + ord("R"))%5

(80+69+82)%5	231%5	1
IND	India	
(ord("I")+ord("N")+ ord("D"))%5

(73+78+68)%5	219%5	4
FJI	Fiji	
(ord("F")+ord("J") +ord("I"))%5

(70+74+73)%5	217%5	2
CAN	Canada	
(ord("C")+ord("A") +ord("N"))%5

(67+65+78)%5	210%5	0
               

Points to Note:

Hash function will always generate the same hash value (output) for a given key (input).
Keys have to be unique.
A given key will have only one value in the key-value pair.


Key(Input)

Value

Hash(Output)

ISR	Israel	(ord("I")+ord("S")+ ord("R"))%5	(73+83+82)%5	238%5	3
PER	Peru	
(ord("P")+ ord("E") + ord("R"))%5

(80+69+82)%5	231%5	1
IND	India	
(ord("I")+ord("N")+ ord("D"))%5

(73+78+68)%5	219%5	4
FJI	Fiji 	(ord("F")+ord("J") +ord("I"))%5	
(70+74+73)%5

217%5	2
CAN	Canada	(ord("C")+ord("A") +ord("N"))%5	(67+65+78)%5	210%5	0
SWE	Sweden	(ord("S")+ord("W") +ord("E"))%5	(83+87+69)%5	239%5	4
 
Two keys (IND and SWE) have generated the same hash value. That means hash function may compute same hash value for multiple keys and this is known as collision in hashing. This occurs because the number of possibilities in input (key) is much greater than the number of possibilities in the output (hash value).

In this example, three letter abbreviation exists for all the countries in the world whereas the hash value can be only between 0 – 4.

Collisions are inevitable, however number of collisions depends on the goodness of the hash function.

hash function may compute same hash value for multiple keys resulting in collision.

Let’s understand how this is handled.

One of the techniques that can be used for handling collision is known as separate chaining. In this case, instead of hash table containing a reference to one value, it will maintain a reference to a linked list. When more than one key maps to the same hash, its values are added as nodes to the corresponding linked list.

Observe the linked list maintained for each hash and how values are stored in case of collision (IND,SWE).

Operations possible on the hash table are put() and get().

put(): This operation is used to put a key-value pair into the hash table based on the key and the hash.

Identify the hash by applying the hash function on the given key
Locate the hash in the hash table
Create a new node with the given key-value pair to be linked to the hash
Traverse through the linked list corresponding to the hash until its end
Place the new node as the last node of the linked list

get(): This operation is used to retrieve a value based on its key and hash.

Algorithm Steps:
Identify the hash by applying the hash function on the given key
Locate the hash in the hash table
Search its corresponding linked list for a node with the given key
When found, return its corresponding value
If a node with key is not found, display "Node not found" and return


Rarely is one data structure better than another in all situations. All the data structures require space for each data item it stores, time to perform each basic operation and also involves programming effort. Only after a careful analysis of the problem, we will be able to determine which is the most suited data structure for a task.

The strategy used to arrive at a solution is an algorithm and it greatly determines the capability and effectiveness of a program.

Just like for fibonacci, there are some common algorithms and techniques which we can use while solving problems. In the next chapters, we’ll be learning a few of them. 

linear search algorithm. It's one of the simplest search algorithms which searches through a list of elements in a sequential manner starting from the first element in the list. The technique used in this algorithm is known as Brute-Force.

 Brute-Force is a trial and error technique in which we keep trying through all the possibilities until the solution is found or until we have exhausted all the possibilities.


This algorithm in which we repeatedly divide the list of elements into two halves and then focus on any one of those lists based on whether the element to be searched is greater than or less than the middle element of the list is known as the binary search algorithm.

Sorting Techniques

1)Selection Sort
Assume that we have an unsorted list.

Find the smallest number and swap it with the number at the first position in the list.
Find the next smallest number and swap it with the number at the second position in the list.
Find the next smallest number and swap it with the number at the third position in the list.
Continue doing it until you are done with the number at the last position in the list.
This strategy of sorting is known as Selection Sort. Like linear search, technique followed here is also Brute-Force.

It is so called because it selects the smallest/largest element in the list and swaps it with the element at the first position, then selects the next smallest/largest element in the list and swaps it with the element at the second position and so on until it is done with the number at last position in the list.


Selection Sort will take n passes to complete sorting n elements. Hence it'll not be ideal in every situation

Bubble Sort

Initialize n as number of elements in the list
for (var1=0, var1<var2-1, var1=var1+1)
     a. Initialize swapped as False
     b. for (var3=0, var3<var2-var1-1, var3=var3+1)
          i. if list[var3] > list[var3+1] then
          Swap the elements at positions var3 and var3+1
          Change the value of swapped to True
     c. if (swapped==False) then break

 This strategy of sorting is known as Bubble Sort. Like selection sort, technique followed here is also Brute-Force.

To sort n elements, selection sort will always go through n-1 passes. Whereas bubble sort stops iterating when it identifies that the list is sorted.

There is another sorting algorithm which may allow us to arrange these numbers faster than selection and bubble sort algorithms!

Let's explore that algorithm. It is called Merge Sort and works well when the number of elements to be sorted is more.

The strategy used in this algorithm is as follows:

Repeatedly divide the input unsorted list into sub-lists, such that each sublist contains only one element.

Repeatedly merge the sub lists to produce new sorted sub lists until there is only one sublist remaining.

 Here is the algorithm for Merge Sort.

Merge_Sort(list)

1. Initialize low as 0 (i.e., start index of the list)

2. Initialize high as the last index of the list

3. If low==high then return list

4. Else

   a.Divide the list into two halves,left list and right list

   b. Invoke Merge_Sort() by passing left list

   c. Invoke Merge_Sort() by passing right list

   d. Invoke Merge() by passing the lists returned in step 4b         and 4c respectively

   e. Return the sorted list which is returned in step 4d

           	
Merge(left_list, right_list)

1. Initialize i, j as 0

2. Create an empty sorted_list

3. While((i < number of elements in left list ) and (j < number of elements in right list) do

    a. If(left_list[i]<=right_list[j]) then append left_list[i] to      the sorted_list and increment i

    b. Else append right_list[j] to sorted_list and increment j

4. If there are any elements left in left_list, append it to      sorted_list

5. If there are any elements left in right_list, append it to sorted_list

6. Return the sorted_list

The technique used in merge sort algorithm is known as Divide and Conquer.

In divide and conquer, we solve a problem by dividing it into independent sub-problems which are solved independently and combined to get the overall solution.

Memory consumption of merge sort is high,
Yes, it requires more memory as it divides the elements in the input list into separate right half and left half lists. This is recursively done until there is only one element left in the lists.

So for each right half and left half lists, separate memory is required.


Quick Sort works by picking an element in the input list as pivot and partitioning the list around the pivot. Partitioning is done such that

    - the pivot is placed at its correct position in the list,

    - elements less than pivot are placed in the left partition and

    - elements greater than the pivot are kept in the right partition.

This is repeatedly done for each partition until all pivots are correctly placed in the list.
The detailed algorithm is as follows:

Quick_Sort(list, low, high):
If low>=high then return
p=Partition(list, low, high)
Invoke Quick_Sort() by passing list, low and p-1
Invoke Quick_Sort() by passing list, p+1, high

Partition(list, low, high):

Choose the element at position low as the pivot
Initialize i as low+1 and j as high
Initialize done as False
While not done do
  a. While (i<=j) and list[i]<=pivot) do increment i by 1
  b. While (j>=i) and list[j]>=pivot) do decrement j by 1
  c. If (j < i) then change the value of done to true
  d. Else swap the elements at position i and j
Swap the elements at position j and low
Return the partition point, j

In the quick sort algorithm we implemented, we have considered pivot as the first element.

However, pivot can also be:

    - A random element in the list.

    - First, middle or the last element in the list

    - Median of first, middle and last element values in the list (“median-of-three”)

Sorting algorithms can also be fun.

What to observe?

Sound is generated only when two values are compared.

The frequency of the sound is based on the values compared.

The patterns in sound density.

How order is formed from chaos!